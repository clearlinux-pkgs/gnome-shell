From 451f4e363604c5106ab263e210c52fc94905a949 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Florian=20M=C3=BCllner?= <fmuellner@gnome.org>
Date: Tue, 12 Feb 2019 15:02:09 +0100
Subject: [PATCH 086/152] cleanup: "Only" use two indentation styles for object
 literals

We currently use no less than three different ways of indenting
object literals:

    let obj1 = {
        foo: 42,
        bar: 23,
    };

    let obj2 = { foo: 42,
                 bar: 23 };

    let obj3 = { foo: 42,
                 bar: 23
               };

The first is the one we want to use everywhere eventually, while the
second is the most commonly used "legacy" style.

It is the third one that is most problematic, as it throws off eslint
fairly badly: It violates both the rule to have consistent line breaks
in braces as well as the indentation style of both regular and legacy
configurations.

Fortunately the third style was mostly used for tween parameters, so
is quite rare after the Tweener purge. Get rid of the remaining ones
to cut down on pre-existing eslint errors.

https://gitlab.gnome.org/GNOME/gnome-shell/merge_requests/716
---
 js/ui/appDisplay.js                |  9 +++---
 js/ui/appFavorites.js              | 22 +++++++--------
 js/ui/background.js                | 42 +++++++++++++++-------------
 js/ui/components/autorunManager.js |  8 +++---
 js/ui/components/networkAgent.js   | 41 ++++++++++++++-------------
 js/ui/dateMenu.js                  | 12 ++++----
 js/ui/endSessionDialog.js          | 18 ++++++------
 js/ui/extensionDownloader.js       | 17 +++++------
 js/ui/layout.js                    | 11 ++++----
 js/ui/lightbox.js                  | 13 +++++----
 js/ui/messageTray.js               | 15 +++++-----
 js/ui/overview.js                  |  7 +++--
 js/ui/popupMenu.js                 | 20 +++++++------
 js/ui/runDialog.js                 |  8 ++++--
 js/ui/screenShield.js              | 15 +++++-----
 js/ui/shellMountOperation.js       | 45 ++++++++++++++++--------------
 js/ui/status/network.js            | 15 +++++-----
 js/ui/viewSelector.js              | 10 +++----
 18 files changed, 173 insertions(+), 155 deletions(-)

diff --git a/js/ui/appDisplay.js b/js/ui/appDisplay.js
index 6cc0e154f..a9c26ab97 100644
--- a/js/ui/appDisplay.js
+++ b/js/ui/appDisplay.js
@@ -1158,11 +1158,10 @@ var AppSearchProvider = class AppSearchProvider {
             if (id.endsWith('.desktop')) {
                 let app = this._appSys.lookup_app(id);
 
-                metas.push({ 'id': app.get_id(),
-                             'name': app.get_name(),
-                             'createIcon'(size) {
-                                 return app.create_icon_texture(size);
-                             }
+                metas.push({
+                    id: app.get_id(),
+                    name: app.get_name(),
+                    createIcon: size => app.create_icon_texture(size),
                 });
             } else {
                 let name = this._systemActions.getName(id);
diff --git a/js/ui/appFavorites.js b/js/ui/appFavorites.js
index 36d3d6a7d..8bfebcfc1 100644
--- a/js/ui/appFavorites.js
+++ b/js/ui/appFavorites.js
@@ -147,12 +147,11 @@ class AppFavorites {
 
         let app = Shell.AppSystem.get_default().lookup_app(appId);
 
-        Main.overview.setMessage(_("%s has been added to your favorites.").format(app.get_name()),
-                                 { forFeedback: true,
-                                   undoCallback: () => {
-                                       this._removeFavorite(appId);
-                                   }
-                                 });
+        let msg = _("%s has been added to your favorites.").format(app.get_name());
+        Main.overview.setMessage(msg, {
+            forFeedback: true,
+            undoCallback: () => this._removeFavorite(appId),
+        });
     }
 
     addFavorite(appId) {
@@ -181,12 +180,11 @@ class AppFavorites {
         if (!this._removeFavorite(appId))
             return;
 
-        Main.overview.setMessage(_("%s has been removed from your favorites.").format(app.get_name()),
-                                 { forFeedback: true,
-                                   undoCallback: () => {
-                                       this._addFavorite(appId, pos);
-                                   }
-                                 });
+        let msg = _("%s has been removed from your favorites.").format(app.get_name());
+        Main.overview.setMessage(msg, {
+            forFeedback: true,
+            undoCallback: () => this._addFavorite(appId, pos),
+        });
     }
 }
 Signals.addSignalMethods(AppFavorites.prototype);
diff --git a/js/ui/background.js b/js/ui/background.js
index babc1e487..8432abc75 100644
--- a/js/ui/background.js
+++ b/js/ui/background.js
@@ -441,20 +441,21 @@ var Background = class Background {
     }
 
     _loadAnimation(file) {
-        this._cache.getAnimation({ file: file,
-                                   settingsSchema: this._settings.schema_id,
-                                   onLoaded: animation => {
-                                       this._animation = animation;
-
-                                       if (!this._animation || this._cancellable.is_cancelled()) {
-                                           this._setLoaded();
-                                           return;
-                                       }
+        this._cache.getAnimation({
+            file: file,
+            settingsSchema: this._settings.schema_id,
+            onLoaded: animation => {
+                this._animation = animation;
+
+                if (!this._animation || this._cancellable.is_cancelled()) {
+                    this._setLoaded();
+                    return;
+                }
 
-                                       this._updateAnimation();
-                                       this._watchFile(file);
-                                   }
-                                 });
+                this._updateAnimation();
+                this._watchFile(file);
+            }
+        });
     }
 
     _loadImage(file) {
@@ -748,13 +749,14 @@ var BackgroundManager = class BackgroundManager {
 
     _createBackgroundActor() {
         let background = this._backgroundSource.getBackground(this._monitorIndex);
-        let backgroundActor = new Meta.BackgroundActor({ meta_display: global.display,
-                                                         monitor: this._monitorIndex,
-                                                         background: background.background,
-                                                         vignette: this._vignette,
-                                                         vignette_sharpness: 0.5,
-                                                         brightness: 0.5,
-                                                       });
+        let backgroundActor = new Meta.BackgroundActor({
+            meta_display: global.display,
+            monitor: this._monitorIndex,
+            background: background.background,
+            vignette: this._vignette,
+            vignette_sharpness: 0.5,
+            brightness: 0.5,
+        });
 
         this._container.add_child(backgroundActor);
 
diff --git a/js/ui/components/autorunManager.js b/js/ui/components/autorunManager.js
index f1aaaaf36..013521baf 100644
--- a/js/ui/components/autorunManager.js
+++ b/js/ui/components/autorunManager.js
@@ -325,10 +325,10 @@ var AutorunNotification = class extends MessageTray.Notification {
                                  style_class: 'hotplug-notification-item-icon' });
         box.add(icon);
 
-        let label = new St.Bin({ y_align: St.Align.MIDDLE,
-                                 child: new St.Label
-                                 ({ text: _("Open with %s").format(app.get_name()) })
-                               });
+        let label = new St.Bin({
+            y_align: St.Align.MIDDLE,
+            child: new St.Label({ text: _("Open with %s").format(app.get_name()) }),
+        });
         box.add(label);
 
         let button = new St.Button({ child: box,
diff --git a/js/ui/components/networkAgent.js b/js/ui/components/networkAgent.js
index 80691b88a..f037ef783 100644
--- a/js/ui/components/networkAgent.js
+++ b/js/ui/components/networkAgent.js
@@ -112,16 +112,17 @@ class NetworkSecretDialog extends ModalDialog.ModalDialog {
                                         expand: true });
         }
 
-        this._okButton = { label: _("Connect"),
-                           action: this._onOk.bind(this),
-                           default: true
-                         };
-
-        this.setButtons([{ label: _("Cancel"),
-                           action: this.cancel.bind(this),
-                           key: Clutter.KEY_Escape,
-                         },
-                         this._okButton]);
+        this._okButton = {
+            label: _("Connect"),
+            action: this._onOk.bind(this),
+            default: true,
+        };
+
+        this.setButtons([{
+            label: _("Cancel"),
+            action: this.cancel.bind(this),
+            key: Clutter.KEY_Escape,
+        }, this._okButton]);
 
         this._updateOkButton();
     }
@@ -551,11 +552,12 @@ var VPNRequestHandler = class {
                 let shouldAsk = keyfile.get_boolean(groups[i], 'ShouldAsk');
 
                 if (shouldAsk) {
-                    contentOverride.secrets.push({ label: keyfile.get_string(groups[i], 'Label'),
-                                                   key: groups[i],
-                                                   value: value,
-                                                   password: keyfile.get_boolean(groups[i], 'IsSecret')
-                                                 });
+                    contentOverride.secrets.push({
+                        label: keyfile.get_string(groups[i], 'Label'),
+                        key: groups[i],
+                        value: value,
+                        password: keyfile.get_boolean(groups[i], 'IsSecret'),
+                    });
                 } else {
                     if (!value.length) // Ignore empty secrets
                         continue;
@@ -609,10 +611,11 @@ Signals.addSignalMethods(VPNRequestHandler.prototype);
 
 var NetworkAgent = class {
     constructor() {
-        this._native = new Shell.NetworkAgent({ identifier: 'org.gnome.Shell.NetworkAgent',
-                                                capabilities: NM.SecretAgentCapabilities.VPN_HINTS,
-                                                auto_register: false
-                                              });
+        this._native = new Shell.NetworkAgent({
+            identifier: 'org.gnome.Shell.NetworkAgent',
+            capabilities: NM.SecretAgentCapabilities.VPN_HINTS,
+            auto_register: false,
+        });
 
         this._dialogs = { };
         this._vpnRequests = { };
diff --git a/js/ui/dateMenu.js b/js/ui/dateMenu.js
index c78b39c6b..2c8253481 100644
--- a/js/ui/dateMenu.js
+++ b/js/ui/dateMenu.js
@@ -30,11 +30,13 @@ var TodayButton = class TodayButton {
         // Having the ability to go to the current date if the user is already
         // on the current date can be confusing. So don't make the button reactive
         // until the selected date changes.
-        this.actor = new St.Button({ style_class: 'datemenu-today-button',
-                                     x_expand: true, x_align: St.Align.START,
-                                     can_focus: true,
-                                     reactive: false
-                                   });
+        this.actor = new St.Button({
+            style_class: 'datemenu-today-button',
+            x_align: St.Align.START,
+            x_expand: true,
+            can_focus: true,
+            reactive: false,
+        });
         this.actor.connect('clicked', () => {
             this._calendar.setDate(new Date(), false);
         });
diff --git a/js/ui/endSessionDialog.js b/js/ui/endSessionDialog.js
index 6267152f1..e1c6517f4 100644
--- a/js/ui/endSessionDialog.js
+++ b/js/ui/endSessionDialog.js
@@ -449,14 +449,16 @@ class EndSessionDialog extends ModalDialog.ModalDialog {
         for (let i = 0; i < dialogContent.confirmButtons.length; i++) {
             let signal = dialogContent.confirmButtons[i].signal;
             let label = dialogContent.confirmButtons[i].label;
-            buttons.push({ action: () => {
-                               this.close(true);
-                               let signalId = this.connect('closed', () => {
-                                   this.disconnect(signalId);
-                                   this._confirm(signal);
-                               });
-                           },
-                           label: label });
+            buttons.push({
+                action: () => {
+                    this.close(true);
+                    let signalId = this.connect('closed', () => {
+                        this.disconnect(signalId);
+                        this._confirm(signal);
+                    });
+                },
+                label: label,
+            });
         }
 
         this.setButtons(buttons);
diff --git a/js/ui/extensionDownloader.js b/js/ui/extensionDownloader.js
index dc67909e8..dc3f1d566 100644
--- a/js/ui/extensionDownloader.js
+++ b/js/ui/extensionDownloader.js
@@ -186,14 +186,15 @@ class InstallExtensionDialog extends ModalDialog.ModalDialog {
         this._info = info;
         this._invocation = invocation;
 
-        this.setButtons([{ label: _("Cancel"),
-                           action: this._onCancelButtonPressed.bind(this),
-                           key: Clutter.Escape
-                         },
-                         { label: _("Install"),
-                           action: this._onInstallButtonPressed.bind(this),
-                           default: true
-                         }]);
+        this.setButtons([{
+            label: _("Cancel"),
+            action: this._onCancelButtonPressed.bind(this),
+            key: Clutter.Escape,
+        }, {
+            label: _("Install"),
+            action: this._onInstallButtonPressed.bind(this),
+            default: true,
+        }]);
 
         let content = new Dialog.MessageDialogContent({
             title: _("Download and install “%s” from extensions.gnome.org?").format(info.name),
diff --git a/js/ui/layout.js b/js/ui/layout.js
index 79c51cf5c..85bbd24c2 100644
--- a/js/ui/layout.js
+++ b/js/ui/layout.js
@@ -238,11 +238,12 @@ var LayoutManager = GObject.registerClass({
                                              reactive: true });
         this.addChrome(this.overviewGroup);
 
-        this.screenShieldGroup = new St.Widget({ name: 'screenShieldGroup',
-                                                 visible: false,
-                                                 clip_to_allocation: true,
-                                                 layout_manager: new Clutter.BinLayout(),
-                                               });
+        this.screenShieldGroup = new St.Widget({
+            name: 'screenShieldGroup',
+            visible: false,
+            clip_to_allocation: true,
+            layout_manager: new Clutter.BinLayout(),
+        });
         this.addChrome(this.screenShieldGroup);
 
         this.panelBox = new St.BoxLayout({ name: 'panelBox',
diff --git a/js/ui/lightbox.js b/js/ui/lightbox.js
index 563bd637a..20092cc04 100644
--- a/js/ui/lightbox.js
+++ b/js/ui/lightbox.js
@@ -108,12 +108,13 @@ var RadialShaderEffect = GObject.registerClass({
  */
 var Lightbox = class Lightbox {
     constructor(container, params) {
-        params = Params.parse(params, { inhibitEvents: false,
-                                        width: null,
-                                        height: null,
-                                        fadeFactor: DEFAULT_FADE_FACTOR,
-                                        radialEffect: false,
-                                      });
+        params = Params.parse(params, {
+            inhibitEvents: false,
+            width: null,
+            height: null,
+            fadeFactor: DEFAULT_FADE_FACTOR,
+            radialEffect: false,
+        });
 
         this._container = container;
         this._children = container.get_children();
diff --git a/js/ui/messageTray.js b/js/ui/messageTray.js
index eca670b12..f4d524540 100644
--- a/js/ui/messageTray.js
+++ b/js/ui/messageTray.js
@@ -136,13 +136,14 @@ var FocusGrabber = class FocusGrabber {
 // A notification without a policy object will inherit the default one.
 var NotificationPolicy = class NotificationPolicy {
     constructor(params) {
-        params = Params.parse(params, { enable: true,
-                                        enableSound: true,
-                                        showBanners: true,
-                                        forceExpanded: false,
-                                        showInLockScreen: true,
-                                        detailsInLockScreen: false
-                                      });
+        params = Params.parse(params, {
+            enable: true,
+            enableSound: true,
+            showBanners: true,
+            forceExpanded: false,
+            showInLockScreen: true,
+            detailsInLockScreen: false,
+        });
         Object.getOwnPropertyNames(params).forEach(key => {
             let desc = Object.getOwnPropertyDescriptor(params, key);
             Object.defineProperty(this, `_${key}`, desc);
diff --git a/js/ui/overview.js b/js/ui/overview.js
index f8b603305..72626cbc0 100644
--- a/js/ui/overview.js
+++ b/js/ui/overview.js
@@ -42,9 +42,10 @@ var ShellInfo = class {
     }
 
     setMessage(text, options) {
-        options = Params.parse(options, { undoCallback: null,
-                                          forFeedback: false
-                                        });
+        options = Params.parse(options, {
+            undoCallback: null,
+            forFeedback: false,
+        });
 
         let undoCallback = options.undoCallback;
         let forFeedback = options.forFeedback;
diff --git a/js/ui/popupMenu.js b/js/ui/popupMenu.js
index 31506dcdf..75f7cae9c 100644
--- a/js/ui/popupMenu.js
+++ b/js/ui/popupMenu.js
@@ -67,12 +67,13 @@ var PopupBaseMenuItem = GObject.registerClass({
     }
 }, class PopupBaseMenuItem extends St.BoxLayout {
     _init(params) {
-        params = Params.parse (params, { reactive: true,
-                                         activate: true,
-                                         hover: true,
-                                         style_class: null,
-                                         can_focus: true
-                                       });
+        params = Params.parse (params, {
+            reactive: true,
+            activate: true,
+            hover: true,
+            style_class: null,
+            can_focus: true,
+        });
         super._init({ style_class: 'popup-menu-item',
                       reactive: params.reactive,
                       track_hover: params.reactive,
@@ -331,9 +332,10 @@ var PopupSwitchMenuItem = GObject.registerClass({
         this._statusBin = new St.Bin({ x_align: St.Align.END });
         this.add(this._statusBin, { expand: true, x_align: St.Align.END });
 
-        this._statusLabel = new St.Label({ text: '',
-                                           style_class: 'popup-status-menu-item'
-                                         });
+        this._statusLabel = new St.Label({
+            text: '',
+            style_class: 'popup-status-menu-item',
+        });
         this._statusBin.child = this._switch;
     }
 
diff --git a/js/ui/runDialog.js b/js/ui/runDialog.js
index ea15ea746..ea8104765 100644
--- a/js/ui/runDialog.js
+++ b/js/ui/runDialog.js
@@ -94,9 +94,11 @@ class RunDialog extends ModalDialog.ModalDialog {
 
         this._errorBox.hide();
 
-        this.setButtons([{ action: this.close.bind(this),
-                           label: _("Close"),
-                           key: Clutter.Escape }]);
+        this.setButtons([{
+            action: this.close.bind(this),
+            label: _("Close"),
+            key: Clutter.Escape,
+        }]);
 
         this._pathCompleter = new Gio.FilenameCompleter();
 
diff --git a/js/ui/screenShield.js b/js/ui/screenShield.js
index 898e999fa..ab83f6846 100644
--- a/js/ui/screenShield.js
+++ b/js/ui/screenShield.js
@@ -429,13 +429,14 @@ var ScreenShield = class {
         this.actor = Main.layoutManager.screenShieldGroup;
 
         this._lockScreenState = MessageTray.State.HIDDEN;
-        this._lockScreenGroup = new St.Widget({ x_expand: true,
-                                                y_expand: true,
-                                                reactive: true,
-                                                can_focus: true,
-                                                name: 'lockScreenGroup',
-                                                visible: false,
-                                              });
+        this._lockScreenGroup = new St.Widget({
+            x_expand: true,
+            y_expand: true,
+            reactive: true,
+            can_focus: true,
+            name: 'lockScreenGroup',
+            visible: false,
+        });
         this._lockScreenGroup.connect('key-press-event',
                                       this._onLockScreenKeyPress.bind(this));
         this._lockScreenGroup.connect('scroll-event',
diff --git a/js/ui/shellMountOperation.js b/js/ui/shellMountOperation.js
index 96eed3152..a8023a2d9 100644
--- a/js/ui/shellMountOperation.js
+++ b/js/ui/shellMountOperation.js
@@ -26,9 +26,10 @@ function _setButtonsForChoices(dialog, choices) {
 
     for (let idx = 0; idx < choices.length; idx++) {
         let button = idx;
-        buttons.unshift({ label: choices[idx],
-                          action: () => dialog.emit('response', button)
-                        });
+        buttons.unshift({
+            label: choices[idx],
+            action: () => dialog.emit('response', button),
+        });
     }
 
     dialog.setButtons(buttons);
@@ -387,24 +388,26 @@ var ShellMountPasswordDialog = GObject.registerClass({
             this._rememberChoice = null;
         }
 
-        this._defaultButtons = [{ label: _("Cancel"),
-                                  action: this._onCancelButton.bind(this),
-                                  key: Clutter.Escape
-                                },
-                                { label: _("Unlock"),
-                                  action: this._onUnlockButton.bind(this),
-                                  default: true
-                                }];
-
-        this._usesKeyfilesButtons = [{ label: _("Cancel"),
-                                       action: this._onCancelButton.bind(this),
-                                       key: Clutter.Escape
-                                     },
-                                     { /* Translators: %s is the Disks application */
-                                       label: _("Open %s").format(disksApp.get_name()),
-                                       action: this._onOpenDisksButton.bind(this),
-                                       default: true
-                                     }];
+        this._defaultButtons = [{
+            label: _("Cancel"),
+            action: this._onCancelButton.bind(this),
+            key: Clutter.Escape,
+        }, {
+            label: _("Unlock"),
+            action: this._onUnlockButton.bind(this),
+            default: true,
+        }];
+
+        this._usesKeyfilesButtons = [{
+            label: _("Cancel"),
+            action: this._onCancelButton.bind(this),
+            key: Clutter.Escape,
+        }, {
+            /* Translators: %s is the Disks application */
+            label: _("Open %s").format(disksApp.get_name()),
+            action: this._onOpenDisksButton.bind(this),
+            default: true,
+        }];
 
         this.setButtons(this._defaultButtons);
     }
diff --git a/js/ui/status/network.js b/js/ui/status/network.js
index 93f95a226..930a20ff5 100644
--- a/js/ui/status/network.js
+++ b/js/ui/status/network.js
@@ -1073,13 +1073,14 @@ class NMWirelessDialog extends ModalDialog.ModalDialog {
 
             this._resortItems();
         } else {
-            network = { ssid: accessPoint.get_ssid(),
-                        mode: accessPoint.mode,
-                        security: this._getApSecurityType(accessPoint),
-                        connections: [],
-                        item: null,
-                        accessPoints: [accessPoint]
-                      };
+            network = {
+                ssid: accessPoint.get_ssid(),
+                mode: accessPoint.mode,
+                security: this._getApSecurityType(accessPoint),
+                connections: [],
+                item: null,
+                accessPoints: [accessPoint],
+            };
             network.ssidText = ssidToLabel(network.ssid);
             this._checkConnections(network, accessPoint);
 
diff --git a/js/ui/viewSelector.js b/js/ui/viewSelector.js
index ddf372e1d..4ee8f41d6 100644
--- a/js/ui/viewSelector.js
+++ b/js/ui/viewSelector.js
@@ -309,12 +309,10 @@ var ViewSelector = class {
         if (params.a11yFocus)
             Main.ctrlAltTabManager.addGroup(params.a11yFocus, name, a11yIcon);
         else
-            Main.ctrlAltTabManager.addGroup(actor, name, a11yIcon,
-                                            { proxy: this.actor,
-                                              focusCallback: () => {
-                                                  this._a11yFocusPage(page);
-                                              }
-                                            });
+            Main.ctrlAltTabManager.addGroup(actor, name, a11yIcon, {
+                proxy: this.actor,
+                focusCallback: () => this._a11yFocusPage(page),
+            });
         page.hide();
         this.actor.add_actor(page);
         return page;
-- 
2.23.0

