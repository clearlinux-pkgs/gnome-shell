From ecfca4fab1a1e05b79aa227081eaca570f3885f5 Mon Sep 17 00:00:00 2001
From: Marco Trevisan <mail@3v1n0.net>
Date: Thu, 12 Apr 2018 17:29:08 -0500
Subject: [PATCH] tweener: Save extra handlers on target and remove them on
 destroy

Saving extra handlers we had using the wrapper as a property
of the object and delete them when resetting the object state.
Without doing this an handler could be called on a destroyed
target when this happens on the onComplete callback.

https://gitlab.gnome.org/3v1n0/gnome-shell/commit/e568b79874789a74f9c67c0d6e3f223a7e1e87e3

Signed-off-by: Jose Lamego <jose.a.lamego@intel.com>
---
 js/ui/tweener.js | 68 +++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 55 insertions(+), 13 deletions(-)

diff --git a/js/ui/tweener.js b/js/ui/tweener.js
index 1a85e2fb1..e2fc4191e 100644
--- a/js/ui/tweener.js
+++ b/js/ui/tweener.js
@@ -69,30 +69,72 @@ function _getTweenState(target) {
     return target.__ShellTweenerState;
 }
 
+function _getExtraHandlers(target) {
+    if (!target.__ShellTweenerHandlers)
+        target.__ShellTweenerHandlers = {};
+    return target.__ShellTweenerHandlers;
+}
+
 function _resetTweenState(target) {
     let state = target.__ShellTweenerState;
 
     if (state) {
-        if (state.destroyedId)
+        if (state.destroyedId) {
             state.actor.disconnect(state.destroyedId);
+	    delete state.destroyedId;
+	}
     }
 
+    _removeHandler(target, 'onComplete', _tweenCompleted);
     target.__ShellTweenerState = {};
 }
 
 function _addHandler(target, params, name, handler) {
-    if (params[name]) {
-        let oldHandler = params[name];
-        let oldScope = params[name + 'Scope'];
-        let oldParams = params[name + 'Params'];
-        let eventScope = oldScope ? oldScope : target;
-
-        params[name] = () => {
-            oldHandler.apply(eventScope, oldParams);
-            handler(target);
-        };
-    } else
-        params[name] = () => { handler(target); };
+    let wrapperNeeded = false;
+    let extraHandlers = _getExtraHandlers(target);
+
+    if (!(name in extraHandlers))
+        extraHandlers[name] = [];
+        wrapperNeeded = true;
+
+    let handlers = extraHandlers[name];
+    handlers.push(handler);
+
+    if (wrapperNeeded) {
+        if (params[name]) {
+            let oldHandler = params[name];
+            let oldScope = params[name + 'Scope'];
+            let oldParams = params[name + 'Params'];
+            let eventScope = oldScope ? oldScope : target;
+
+            params[name] = function () {
+                oldHandler.apply(eventScope, oldParams);
+                handlers.forEach((h) => h(target));
+            };
+        } else
+            params[name] = function () { handlers.forEach((h) => h(target)); };
+    }
+}
+
+function _removeHandler(target, name, handler) {
+    let extraHandlers = _getExtraHandlers(target);
+
+    if (name in extraHandlers) {
+        let handlers = extraHandlers[name];
+        let handlerIndex = handlers.indexOf(handler);
+
+        while (handlerIndex > -1) {
+            handlers.splice(handlerIndex, 1);
+            handlerIndex = handlers.indexOf(handler);
+        }
+    }
+}
+
+function _removeHandlers(target) {
+    let extraHandlers = _getExtraHandlers(target);
+
+    for (let name in extraHandlers)
+        extraHandlers[name].length = 0;
 }
 
 function _actorDestroyed(target) {
-- 
2.17.0

